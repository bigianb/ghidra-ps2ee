
############################
#
# EE Instructions
#
############################

# 0000 0000 000t tttt dddd daaa aa11 1000
:dsll RD, RTsrc, sa             is prime=0 & fct=56 & rs=0 & RTsrc & RD & sa {
    RD = RTsrc << sa;
}
# 0000 0000 000t tttt dddd daaa aa11 1100
:dsll32 RD, RTsrc, sa           is prime=0 & fct=60 & rs=0 & RTsrc & RD & sa {
    RD = RTsrc << (sa + 32);
}
# 0000 00ss ssst tttt dddd d000 0001 0100
:dsllv RD, RTsrc, RSsrc         is prime=0 & fct=20 & RSsrc & RTsrc & RD & sa=0 {
    RD = RTsrc << RSsrc;
}
# 0000 0000 000t tttt dddd daaa aa11 1011
:dsra RD, RTsrc, sa             is prime=0 & fct=59 & rs=0 & RTsrc & RD & sa {
    RD = RTsrc s>> sa;
}
# 0000 0000 000t tttt dddd daaa aa11 1111
:dsra32 RD, RTsrc, sa           is prime=0 & fct=63 & rs=0 & RTsrc & RD & sa {
    RD = RTsrc s>> (sa + 32);
}
# 0000 00ss ssst tttt dddd d000 0001 0111
:dsrav RD, RTsrc, RSsrc         is prime=0 & fct=23 & RSsrc & RTsrc & RD & sa=0 {
    RD = RTsrc s>> RSsrc;
}
# 0000 0000 000t tttt dddd daaa aa11 1010
:dsrl RD, RTsrc, sa             is prime=0 & fct=58 & rs=0 & RTsrc & RD & sa {
    RD = RTsrc >> sa;
}
# 0000 0000 000t tttt dddd daaa aa11 1110
:dsrl32 RD, RTsrc, sa           is prime=0 & fct=62 & rs=0 & RTsrc & RD & sa {
    RD = RTsrc >> (sa + 32);
}
# 0000 00ss ssst tttt dddd d000 0101 0110
:dsrlv RD, RTsrc, RSsrc         is prime=0 & fct=22 & RSsrc & RTsrc & RD & sa=0 {
    RD = RTsrc >> RSsrc;
}

# 0000 00ss ssst tttt dddd d000 0010 1110
:dsub RD, RSsrc, RTsrc          is prime=0 & fct=46 & RSsrc & RTsrc & RD & sa=0 {
    RD = RSsrc - RTsrc;
}
# 0000 00ss ssst tttt dddd d000 0010 1111
:dsubu RD, RSsrc, RTsrc         is prime=0 & fct=47 & RSsrc & RTsrc & RD & sa=0 {
    RD = RSsrc - RTsrc;
}

# 1101 11bb bbbt tttt iiii iiii iiii iiii
:ld RT, OFF_BASE                is prime=55 & OFF_BASE & RT {        
    RT = *[ram]:8 OFF_BASE;    
}

# 0110 10bb bbbt tttt iiii iiii iiii iiii
:ldl RT, OFF_BASE               is prime=26 & OFF_BASE & RT {        
    shft:$(ADDRSIZE) = OFF_BASE & 0x7; 
    addr:$(ADDRSIZE) = OFF_BASE - shft; 
    valOrig:8 = RT & (0xffffffffffffffff >> ((shft+1) * 8));
    valLoad:8 = *(addr) << ((7-shft) * 8);     
    RT = valLoad | valOrig;
}
# 0110 11bb bbbt tttt iiii iiii iiii iiii
:ldr RT, OFF_BASE               is prime=27 & OFF_BASE & RT {
    # no-op
    # see ldl instruction  
    
    shft:$(ADDRSIZE) = OFF_BASE & 0x7; 
    addr:$(ADDRSIZE) = OFF_BASE - shft; 
    valOrig:8 = RT & (0xffffffffffffffff << ((8-shft) * 8));
    valLoad:8 = *(addr) >> (shft * 8);
    RT = valOrig | valLoad;
}

# ldl and ldr almost always come in pairs. 
# When the analyzer does finds a matching ldl/ldr pair, the pcode is simplified so that 
# ldl does all the loading while ldr is a no-op

:ldl RT, OFF_BASE               is prime=26 & OFF_BASE & RT & PAIR_INSTRUCTION_FLAG=1 [ PAIR_INSTRUCTION_FLAG = 1; globalset(inst_next, PAIR_INSTRUCTION_FLAG);] {        
}    
:ldr RT, OFF_BASE               is prime=27 & OFF_BASE & RT & PAIR_INSTRUCTION_FLAG=1 [ PAIR_INSTRUCTION_FLAG = 0; ] {
    RT = *[ram]:8 OFF_BASE;
}


# 1111 11bb bbbt tttt iiii iiii iiii iiii
:sd RTsrc, OFF_BASE             is prime=63 & OFF_BASE & RTsrc {
    *[ram]:8 OFF_BASE = RTsrc;
}

# 1011 00bb bbbt tttt iiii iiii iiii iiii
:sdl RTsrc, OFF_BASE            is prime=44 & OFF_BASE & RTsrc {        
    shft:$(ADDRSIZE) = OFF_BASE & 0x7; 
    addr:$(ADDRSIZE) = OFF_BASE - shft; 
    valOrig:8 = *(addr) & (0xffffffffffffffff << ((shft+1) * 8));
    valStore:8 = RTsrc >> ((7-shft) * 8);
    *(addr) = valOrig | valStore;    
}
# 1011 01bb bbbt tttt iiii iiii iiii iiii
:sdr RTsrc, OFF_BASE            is prime=45 & OFF_BASE & RTsrc {
    shft:$(ADDRSIZE) = OFF_BASE & 0x7;      
    addr:$(ADDRSIZE) = OFF_BASE - shft; 
    valOrig:8 = *(addr) & (0xffffffffffffffff >> ((8-shft) * 8));
    valStore:8 = RTsrc << (shft*8);
    *(addr) = valStore | valOrig;
}

# When the analyzer finds a matching sdl/sdr pair, the pcode is simplified so that 
# sdl does all the storing while sdr is a no-op
:sdl RTsrc, OFF_BASE            is prime=44 & OFF_BASE & RTsrc & PAIR_INSTRUCTION_FLAG=1 [ PAIR_INSTRUCTION_FLAG = 1; globalset(inst_next, PAIR_INSTRUCTION_FLAG);] {        
}
:sdr RTsrc, OFF_BASE            is prime=45 & OFF_BASE & RTsrc & PAIR_INSTRUCTION_FLAG=1 [ PAIR_INSTRUCTION_FLAG = 0; ] {
    *[ram]:8 OFF_BASE = RTsrc;
}

# 0111 10bb bbbt tttt iiii iiii iiii iiii
:lq RT, OFF_BASE                is prime=30 & OFF_BASE & RT {        
    RT = *[ram]:16 OFF_BASE;    
}

# 0111 11bb bbbt tttt iiii iiii iiii iiii
:sq RTsrc, OFF_BASE             is prime=31 & OFF_BASE & RTsrc {
    *[ram]:16 OFF_BASE = RTsrc;
}

# 0000 01rr rrr1 1001 iiii iiii iiii iiii
:mtsah rs, immed                is prime=1 & rt=25 & rs & immed {
}

# 0100 01ff ffft tttt ssss sddd dd01 1000
# TODO: add accumulator register
:adda.S fs, ft           is prime=17 & fct=0x18 & format=0x10 & fd=0 & ft & fs {

}

# 0000 00ss ssst tttt dddd d000 0001 1000
:mult rd, RS32src, RT32src              is prime=0 & fct=24 & RS32src & RT32src & rd & sa=0 {
    tmp1:8 = sext( RS32src );
    tmp2:8 = sext( RT32src );
    prod:8 = tmp1 * tmp2;
    rd = prod;
    lo = sext(prod:4);
    prod = prod >> 32;
    hi = sext(prod:4);
}

# 0100 0110 000t tttt 0000 0ddd dd00 0100
:sqrt.S fd, ft              is prime=17 & format=0x10 & ft & fs=0 & fd & fct=4  {
    fd = sqrt(ft);
}
