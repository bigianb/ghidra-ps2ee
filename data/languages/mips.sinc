
#
# Notes about register names and function args:
#
#   Function args are passed in a0 - a3, which are the same as $4 - $7, other args are on the stack
#   Floating point args are in f12 and f14
#
#   Function return values are stored in v0 (and v1 if the regs are 32-bit and return type is 64-bits)
#     v0 and v1 are the same as general purpose regs $2 and $3
#   Floating point return values are in f0 (and f1 if needed for binding)
#
#   $29 is the stack pointer sp
#   $30 is the frame pointer fp also called s8
#   $31 is the return address ra
#
#
#-----

@define REGSIZE "8"     # General purpose register size 
@define FREGSIZE "4"    # Floating point register size 
@define ADDRSIZE "4"    # Memory address size (8 or 4, virtual and physical)
@define SIZETO4  "4"   # In 32-bit mode, no truncation needed
@define ADDRCAST ":4"   # need to down cast to pointer size
@define NEEDCAST "1"

#-----

define endian=little;
define alignment=2;

define space ram type=ram_space size=$(ADDRSIZE) default;
define space register type=register_space size=4;

# General purpose registers
define register offset=0 size=$(REGSIZE) [ 
    zero at v0 v1 
    a0 a1 a2 a3 
    t0 t1 t2 t3 
    t4 t5 t6 t7 
    s0 s1 s2 s3 
    s4 s5 s6 s7 
    t8 t9 k0 k1 
    gp sp s8 ra
    pc
];

# We need the 32-bit pieces of the main registers for the 32-bit instructions
define register offset=0 size=4 [
    zero_lo zero_hi at_lo at_hi v0_lo v0_hi v1_lo v1_hi
    a0_lo a0_hi a1_lo a1_hi a2_lo a2_hi a3_lo a3_hi
    t0_lo t0_hi t1_lo t1_hi t2_lo t2_hi t3_lo t3_hi
    t4_lo t4_hi t5_lo t5_hi t6_lo t6_hi t7_lo t7_hi
    s0_lo s0_hi s1_lo s1_hi s2_lo s2_hi s3_lo s3_hi
    s4_lo s4_hi s5_lo s5_hi s6_lo s6_hi s7_lo s7_hi
    t8_lo t8_hi t9_lo t9_hi k0_lo k0_hi k1_lo k1_hi
    gp_lo gp_hi sp_lo sp_hi s8_lo s8_hi ra_lo ra_hi
    pc_lo pc_hi
];

# Floating point registers
define register offset=0x1000 size=4 [
    f1  f0  f3  f2  f5  f4  f7  f6
    f9  f8  f11 f10 f13 f12 f15 f14
    f17 f16 f19 f18 f21 f20 f23 f22
    f25 f24 f27 f26 f29 f28 f31 f30
];

# Floating point control registers
define register offset=0x1200 size=4 [
    fir     fccr       fexr     fenr    fcsr
];

# COP-0 control registers, sel=0
define register offset=0x2000 size=$(REGSIZE) [
    Index           Random          EntryLo0        EntryLo1 
    Context         PageMask        Wired           HWREna  
    BadVAddr        Count           EntryHi         Compare  
    Status          Cause           EPC             PRId 
    Config          LLAddr          WatchLo         WatchHi 
    XContext        cop0_reg21      cop0_reg22      Debug
    DEPC            PerfCnt         ErrCtl          CacheErr
    TagLo           TagHi           ErrorEPC        DESAVE 
];

# COP-0 control registers, sel=1
define register offset=0x2100 size=$(REGSIZE) [
    MVPControl      VPEControl      TCStatus        cop0_reg3.1
    ContextConfig   PageGrain       SRSConf0        cop0_reg7.1
    cop0_reg8.1     cop0_reg9.1     cop0_reg10.1    cop0_reg11.1
    IntCtl          cop0_reg13.1    cop0_reg14.1    EBase
    Config1         cop0_reg17.1    WatchLo.1       WatchHi.1
    cop0_reg20.1    cop0_reg21.1    cop0_reg22.1    TraceControl
    cop0_reg24.1    PerfCnt.1       cop0_reg26.1    CacheErr.1
    DataLo.1        DataHi.1        cop0_reg30.1    cop0_reg31.1
];

# COP-0 control registers, sel=2
define register offset=0x2200 size=$(REGSIZE) [
    MVPConf0        VPEConf0        TCBind          cop0_reg3.2
    cop0_reg4.2     cop0_reg5.2     SRSConf1        cop0_reg7.2
    cop0_reg8.2     cop0_reg9.2     cop0_reg10.2    cop0_reg11.2
    SRSCtl          cop0_reg13.2    cop0_reg14.2    cop0_reg15.2
    Config2         cop0_reg17.2    WatchLo.2       WatchHi.2
    cop0_reg20.2    cop0_reg21.2    cop0_reg22.2    TraceControl2
    cop0_reg24.2    PerfCnt.2       cop0_reg26.2    CacheErr.2
    TagLo.2         TagHi.2         cop0_reg30.2    cop0_reg31.2
];

# COP-0 control registers, sel=3
define register offset=0x2300 size=$(REGSIZE) [
    MVPConf1        VPEConf1        TCRestart       cop0_reg3.3
    cop0_reg4.3     cop0_reg5.3     SRSConf2        cop0_reg7.3
    cop0_reg8.3     cop0_reg9.3     cop0_reg10.3    cop0_reg11.3
    SRSMap          cop0_reg13.3    cop0_reg14.3    cop0_reg15.3
    Config3         cop0_reg17.3    WatchLo.3       WatchHi.3
    cop0_reg20.3    cop0_reg21.3    cop0_reg22.3    UserTraceData
    cop0_reg24.3    PerfCnt.3       cop0_reg26.3    CacheErr.3
    DataLo.3        DataHi.3        cop0_reg30.3    cop0_reg31.3
];

# COP-0 control registers, sel=4
define register offset=0x2400 size=$(REGSIZE) [
    cop0_reg0.4     YQMask          TCHalt          cop0_reg3.4
    cop0_reg4.4     cop0_reg5.4     SRSConf3        cop0_reg7.4
    cop0_reg8.4     cop0_reg9.4     cop0_reg10.4    cop0_reg11.4
    cop0_reg12.4    cop0_reg13.4    cop0_reg14.4    cop0_reg15.4
    cop0_reg16.4    cop0_reg17.4    WatchLo.4       WatchHi.4
    cop0_reg20.4    cop0_reg21.4    cop0_reg22.4    TraceBPC
    cop0_reg24.4    PerfCnt.4       cop0_reg26.4    CacheErr.4
    TagLo.4         TagHi.4         cop0_reg30.4    cop0_reg31.4
];

# COP-0 control registers, sel=5
define register offset=0x2500 size=$(REGSIZE) [
    cop0_reg0.5 VPESchedule TCContext   cop0_reg3.5
    cop0_reg4.5     cop0_reg5.5     SRSConf4        cop0_reg7.5
    cop0_reg8.5     cop0_reg9.5     cop0_reg10.5    cop0_reg11.5
    cop0_reg12.5    cop0_reg13.5    cop0_reg14.5    cop0_reg15.5
    cop0_reg16.5    cop0_reg17.5    WatchLo.5       WatchHi.5
    cop0_reg20.5    cop0_reg21.5    cop0_reg22.5    cop0_reg23.5
    cop0_reg24.5    PerfCnt.5       cop0_reg26.5    CacheErr.5
    DataLo.5        DataHi.5        cop0_reg30.5    cop0_reg31.5
];

# COP-0 control registers, sel=6
define register offset=0x2600 size=$(REGSIZE) [
    cop0_reg0.6     VPEScheFBack    TCSchedule      cop0_reg3.6
    cop0_reg4.6     cop0_reg5.6     cop0_reg6.6     cop0_reg7.6
    cop0_reg8.6     cop0_reg9.6     cop0_reg10.6    cop0_reg11.6
    cop0_reg12.6    cop0_reg13.6    cop0_reg14.6    cop0_reg15.6
    cop0_reg16.6    cop0_reg17.6    WatchLo.6       WatchHi.6
    cop0_reg20.6    cop0_reg21.6    cop0_reg22.6    cop0_reg23.6
    cop0_reg24.6    PerfCnt.6       cop0_reg26.6    CacheErr.6
    TagLo.6         TagHi.6         cop0_reg30.6    cop0_reg31.6
];

# COP-0 control registers, sel=7
define register offset=0x2700 size=$(REGSIZE) [
    cop0_reg0.7     VPEOpt          TCScheFBack     cop0_reg3.7
    cop0_reg4.7     cop0_reg5.7     cop0_reg6.7     cop0_reg7.7
    cop0_reg8.7     cop0_reg9.7     cop0_reg10.7    cop0_reg11.7
    cop0_reg12.7    cop0_reg13.7    cop0_reg14.7    cop0_reg15.7
    cop0_reg16.7    cop0_reg17.7    WatchLo.7       WatchHi.7
    cop0_reg20.7    cop0_reg21.7    cop0_reg22.7    cop0_reg23.7
    cop0_reg24.7    PerfCnt.7       cop0_reg26.7    CacheErr.7
    DataLo.7        DataHi.7        cop0_reg30.7    cop0_reg31.7
];

# Some other internal registers
define register offset=0x3000 size=$(REGSIZE) [ hi lo tsp ];

define register offset=0x3F00 size=1 [ ISAModeSwitch ];

# Define context bits
define register offset=0x4000 size=4   contextreg;
define context contextreg
  PAIR_INSTRUCTION_FLAG=(0,0) noflow      # =1 paired instruction
  REL6=(31,31)							  # =1 Release 6, =0 Pre release 6, (Fixed, set via pspec)
  RELP=(30,30)							  # =1 Mips16e, =0 MicroMips. REL6, RELP can't both be 1 (Fixed, set via pspec)
;


# Instruction fields

define token instr(32)
    prime       = (26,31)
    bit25       = (25,25)
    zero1       = (22,25)
    rs32        = (21,25)
    frD         = (21,25)
    rs          = (21,25)
    fr          = (21,25)
    base        = (21,25)
    format      = (21,25)
    copop       = (21,25)
    cop_0       = (6, 20)
    mfmc0       = (21,25)
    zero21		= (21,25)
    jsub		= (21,25)
    breakcode   = (6,25)
    off26      = (0,25) signed			# 26 bit signed offset, e.g. balc, bc
    ind26      = (0,25)				# 26 bit unsigned index, e.g. jal
    copfill     = (6,24)
    cofun       = (0,24)
    off21		= (0,20) signed		# 21 bit signed offset in conditional branch/link
    off16		= (0,15) signed		# 16 bit signed offset in conditional branch/link
    bit21       = (21,21)
    bitz19		= (19,20)
    pcrel		= (19,20)
    pcrel2		= (18,20)
    cc          = (18,20)
    rt32        = (16,20)
    rt          = (16,20)
    ftD         = (16,20)
    ft          = (16,20)
    index       = (16,20)
    hint        = (16,20)
    cop1code    = (16,20)
    synci       = (16,20)  
    cond        = (16,20)
    op          = (16,20)
    nd          = (17,17)
    tf          = (16,16)
    szero       = (11,25)
    baser6		= (11,15)
    rd32        = (11,15)
    rd          = (11,15)
    rd0_0       = (11,15)
    rd0_1       = (11,15)
    rd0_2       = (11,15)
    rd0_3       = (11,15)
    rd0_4       = (11,15)
    rd0_5       = (11,15)
    rd0_6       = (11,15)
    rd0_7       = (11,15)
    cp2cprSel0	= (11,15)
    cp2cprSel1	= (11,15)
    cp2cprSel2	= (11,15)
    cp2cprSel3	= (11,15)
    cp2cprSel4	= (11,15)
    cp2cprSel5	= (11,15)
    cp2cprSel6	= (11,15)
    cp2cprSel7	= (11,15)
    fsD         = (11,15)
    fs          = (11,15)
    fs_unk		= (11,15)
    fs_fcr		= (11,15)
    zero4       = (11,15)
    msbd        = (11,15)
    code        = (6,15)
    bit10       = (10,10)
    spec2		= (9,10)
    spec3		= (8,10)
    simmed9		= (7,15)
    zero2       = (7,10)
    fdD         = (6,10)
    fd          = (6,10)
    stype       = (6,10)
    sa          = (6,10)
    lsb         = (6,10)
    fct2        = (6,10)
    zero5       = (6,10)
    wsbh        = (6,10)
    bp3			= (6,8)
    sa2			= (6,7)
    bp2			= (6,7)
    zero6       = (3,10)
    bigfunct    = (0,10)
    fct         = (0,5)
    bshfl       = (0,5)
    bit6        = (6,6)
    zero3       = (0,4)
    bit5        = (5,5)
    op4         = (3,5)
    sel         = (0,2)
    format1X    = (0,2)
    simmed19	= (0,18) signed
    simmed18	= (0,17) signed
    immed       = (0,15)
    simmed      = (0,15) signed
    simmseq		= (6,15) signed
    simmed11	= (0,10)
;

attach variables [ rs rt rd base index baser6 ] [ 
    zero  at  v0  v1  a0  a1  a2  a3
    t0    t1  t2  t3  t4  t5  t6  t7
    s0    s1  s2  s3  s4  s5  s6  s7
    t8    t9  k0  k1  gp  sp  s8  ra 
];

attach variables [ rs32 rt32 rd32 ] [ 
    zero_lo  at_lo  v0_lo  v1_lo  a0_lo  a1_lo  a2_lo  a3_lo
    t0_lo    t1_lo  t2_lo  t3_lo  t4_lo  t5_lo  t6_lo  t7_lo
    s0_lo    s1_lo  s2_lo  s3_lo  s4_lo  s5_lo  s6_lo  s7_lo
    t8_lo    t9_lo  k0_lo  k1_lo  gp_lo  sp_lo  s8_lo  ra_lo 
];
               
attach variables [ fs ft fd fr ] [
    f0  f1  f2  f3  f4  f5  f6  f7  f8  f9  f10 f11 f12 f13 f14 f15
    f16 f17 f18 f19 f20 f21 f22 f23 f24 f25 f26 f27 f28 f29 f30 f31
];

# Only a few Floating Point Control (FCR) registers are defined
attach variables [ fs_fcr ] [
	fir		_		_		_		_		_		_		_
	_		_		_		_		_		_		_		_
	_		_		_		_		_		_		_		_
	_		fccr	fexr	_		fenr	_		_		fcsr
];
    
attach variables [ rd0_0 ] [
    Index           Random          EntryLo0        EntryLo1 
    Context         PageMask        Wired           HWREna  
    BadVAddr        Count           EntryHi         Compare  
    Status          Cause           EPC             PRId 
    Config          LLAddr          WatchLo         WatchHi 
    XContext        cop0_reg21      cop0_reg22      Debug
    DEPC            PerfCnt         ErrCtl          CacheErr
    TagLo           TagHi           ErrorEPC        DESAVE 
];

attach variables [ rd0_1 ] [
    MVPControl      VPEControl      TCStatus        cop0_reg3.1
    ContextConfig   PageGrain       SRSConf0        cop0_reg7.1
    cop0_reg8.1     cop0_reg9.1     cop0_reg10.1    cop0_reg11.1
    IntCtl          cop0_reg13.1    cop0_reg14.1    EBase
    Config1         cop0_reg17.1    WatchLo.1       WatchHi.1
    cop0_reg20.1    cop0_reg21.1    cop0_reg22.1    TraceControl
    cop0_reg24.1    PerfCnt.1       cop0_reg26.1    CacheErr.1
    DataLo.1        DataHi.1        cop0_reg30.1    cop0_reg31.1
];

attach variables [ rd0_2 ] [
    MVPConf0        VPEConf0        TCBind          cop0_reg3.2
    cop0_reg4.2     cop0_reg5.2     SRSConf1        cop0_reg7.2
    cop0_reg8.2     cop0_reg9.2     cop0_reg10.2    cop0_reg11.2
    SRSCtl          cop0_reg13.2    cop0_reg14.2    cop0_reg15.2
    Config2         cop0_reg17.2    WatchLo.2       WatchHi.2
    cop0_reg20.2    cop0_reg21.2    cop0_reg22.2    TraceControl2
    cop0_reg24.2    PerfCnt.2       cop0_reg26.2    CacheErr.2
    TagLo.2         TagHi.2         cop0_reg30.2    cop0_reg31.2
];

attach variables [ rd0_3 ] [
    MVPConf1        VPEConf1        TCRestart       cop0_reg3.3
    cop0_reg4.3     cop0_reg5.3     SRSConf2        cop0_reg7.3
    cop0_reg8.3     cop0_reg9.3     cop0_reg10.3    cop0_reg11.3
    SRSMap          cop0_reg13.3    cop0_reg14.3    cop0_reg15.3
    Config3         cop0_reg17.3    WatchLo.3       WatchHi.3
    cop0_reg20.3    cop0_reg21.3    cop0_reg22.3    UserTraceData
    cop0_reg24.3    PerfCnt.3       cop0_reg26.3    CacheErr.3
    DataLo.3        DataHi.3        cop0_reg30.3    cop0_reg31.3
];

attach variables [ rd0_4 ] [
    cop0_reg0.4     YQMask          TCHalt          cop0_reg3.4
    cop0_reg4.4     cop0_reg5.4     SRSConf3        cop0_reg7.4
    cop0_reg8.4     cop0_reg9.4     cop0_reg10.4    cop0_reg11.4
    cop0_reg12.4    cop0_reg13.4    cop0_reg14.4    cop0_reg15.4
    cop0_reg16.4    cop0_reg17.4    WatchLo.4       WatchHi.4
    cop0_reg20.4    cop0_reg21.4    cop0_reg22.4    TraceBPC
    cop0_reg24.4    PerfCnt.4       cop0_reg26.4    CacheErr.4
    TagLo.4         TagHi.4         cop0_reg30.4    cop0_reg31.4
];

attach variables [ rd0_5 ] [
    cop0_reg0.5 VPESchedule TCContext   cop0_reg3.5
    cop0_reg4.5     cop0_reg5.5     SRSConf4        cop0_reg7.5
    cop0_reg8.5     cop0_reg9.5     cop0_reg10.5    cop0_reg11.5
    cop0_reg12.5    cop0_reg13.5    cop0_reg14.5    cop0_reg15.5
    cop0_reg16.5    cop0_reg17.5    WatchLo.5       WatchHi.5
    cop0_reg20.5    cop0_reg21.5    cop0_reg22.5    cop0_reg23.5
    cop0_reg24.5    PerfCnt.5       cop0_reg26.5    CacheErr.5
    DataLo.5        DataHi.5        cop0_reg30.5    cop0_reg31.5
];

attach variables [ rd0_6 ] [
    cop0_reg0.6     VPEScheFBack    TCSchedule      cop0_reg3.6
    cop0_reg4.6     cop0_reg5.6     cop0_reg6.6     cop0_reg7.6
    cop0_reg8.6     cop0_reg9.6     cop0_reg10.6    cop0_reg11.6
    cop0_reg12.6    cop0_reg13.6    cop0_reg14.6    cop0_reg15.6
    cop0_reg16.6    cop0_reg17.6    WatchLo.6       WatchHi.6
    cop0_reg20.6    cop0_reg21.6    cop0_reg22.6    cop0_reg23.6
    cop0_reg24.6    PerfCnt.6       cop0_reg26.6    CacheErr.6
    TagLo.6         TagHi.6         cop0_reg30.6    cop0_reg31.6
];

attach variables [ rd0_7 ] [
    cop0_reg0.7     VPEOpt          TCScheFBack     cop0_reg3.7
    cop0_reg4.7     cop0_reg5.7     cop0_reg6.7     cop0_reg7.7
    cop0_reg8.7     cop0_reg9.7     cop0_reg10.7    cop0_reg11.7
    cop0_reg12.7    cop0_reg13.7    cop0_reg14.7    cop0_reg15.7
    cop0_reg16.7    cop0_reg17.7    WatchLo.7       WatchHi.7
    cop0_reg20.7    cop0_reg21.7    cop0_reg22.7    cop0_reg23.7
    cop0_reg24.7    PerfCnt.7       cop0_reg26.7    CacheErr.7
    DataLo.7        DataHi.7        cop0_reg30.7    cop0_reg31.7
];

attach names hint [ 
    "load" "store" "hint2" "hint3" "load_streamed" "store_streamed" "load_retained" "store_retained"
    "hint8" "hint9" "hint10" "hint11" "hint12" "hint13" "hint14" "hint15"
    "hint16" "hint17" "hint18" "hint19" "hint20" "hint21" "hint22" "hint23" "hint24"
    "writeback_invalidate" "hint26" "hint27" "hint28" "hint29" "PrepareForStore" "hint31" ];
    

# Subconstructors
RD0: rd0_0  is rd0_0 & sel=0  { export rd0_0; }
RD0: rd0_1  is rd0_1 & sel=1  { export rd0_1; }
RD0: rd0_2  is rd0_2 & sel=2  { export rd0_2; }
RD0: rd0_3  is rd0_3 & sel=3  { export rd0_3; }
RD0: rd0_4  is rd0_4 & sel=4  { export rd0_4; }
RD0: rd0_5  is rd0_5 & sel=5  { export rd0_5; }
RD0: rd0_6  is rd0_6 & sel=6  { export rd0_6; }
RD0: rd0_7  is rd0_7 & sel=7  { export rd0_7; }

RD: rd          is rd           { export rd; }
RDsrc: rd       is rd           { export rd; }
RDsrc: rd       is rd & rd=0    { export 0:$(REGSIZE); }

RS: rs       	is rs           { export rs; }
RSsrc: rs       is rs           { export rs; }
RSsrc: rs       is rs & rs=0    { export 0:$(REGSIZE); }

RT: rt          is rt           { export rt; }
RTsrc: rt       is rt           { export rt; }
RTsrc: rt       is rt & rt=0    { export 0:$(REGSIZE); }

RD32: rd      is rd & rd32         { export rd32; }
RS32src: rs   is rs & rs32         { export rs32; }
RS32src: rs   is rs & rs32=0       { export 0:4; }
RT32: rt      is rt & rt32         { export rt32; }
RT32src: rt   is rt & rt32         { export rt32; }
RT32src: rt   is rt & rt32=0       { export 0:4; }

@ifdef NEEDCAST
macro MemSrcCast(dest,src) {
	dest = *(src:$(ADDRSIZE));
}
macro MemDestCast(dest,src) {
	*(dest:$(ADDRSIZE)) = src;
}
macro ValCast(dest,src) {
	dest = src:$(ADDRSIZE);
}
@else
macro MemSrcCast(dest,src) {
	dest = *(src);
}
macro MemDestCast(dest,src) {
	*(dest) = src;
}
macro ValCast(dest,src) {
	dest = src;
}
@endif

OFF_BASE: simmed(base)  is simmed & base    { tmp:$(REGSIZE) = base + simmed; tmpscaled:$(ADDRSIZE) = 0; ValCast(tmpscaled,tmp); export tmpscaled; }
INDEX_BASE: index(base) is index & base     { tmp:$(REGSIZE) = base + index; tmpscaled:$(ADDRSIZE) = 0; ValCast(tmpscaled,tmp); export tmpscaled; }

S18L3: val							is simmed18 [ val = simmed18 << 3; ] { export *[const]:4 val; }
S19L2: val							is simmed19 [ val = simmed19 << 2; ] { export *[const]:4 val; }
S16L16: val							is simmed [ val = simmed << 16; ] { export *[const]:4 val; }
S16L32: val							is simmed [ val = simmed << 32; ] { export *[const]:8 val; }
S16L48: val							is simmed [ val = simmed << 48; ] { export *[const]:8 val; }
SAV: val							is sa2 [ val = sa2+1; ] { export *[const]:1 val; }

Rel16: reloc		is off16	[ reloc=inst_start+4+4*off16; ]					{ export *:$(ADDRSIZE) reloc; }
Rel21: reloc		is off21	[ reloc=inst_start+4+4*off21; ]					{ export *:$(ADDRSIZE) reloc; }
Rel26: reloc		is off26	[ reloc=inst_start+4+4*off26; ]					{ export *:$(ADDRSIZE) reloc; }
Abs26: reloc		is ind26	[ reloc=((inst_start+4) $and 0xfffffffff0000000) | 4*ind26; ]	{ export *:$(ADDRSIZE) reloc; }

InsSize: mysize           is msbd & lsb   [ mysize = msbd - lsb + 1; ]      { tmp:1 = mysize; export tmp; }
ExtSize: mysize           is msbd         [ mysize = msbd + 1; ]            { tmp:1 = mysize; export tmp; }

macro JXWritePC(addr) {
   ISAModeSwitch = (addr & 0x1) != 0;
   tmp:$(REGSIZE) = -2;
   tmp = tmp & addr;
   pc = tmp;
}

# Floating point formats
#fmt: "S"        is format=0x10   { }
#fmt: "D"        is format=0x11   { }
#fmt: "W"        is format=0x14   { }
#fmt: "L"        is format=0x15   { }
#fmt: "PS"       is format=0x16   { }

fmt1: "S"       is format=0x10   { }
fmt1: "D"       is format=0x11   { }
fmt1: "PS"      is format=0x16   { }

fmt2: "S"       is format=0x10   { }
fmt2: "D"       is format=0x11   { }

fmt3: "S"       is format=0x10   { }
fmt3: "W"       is format=0x14   { }
fmt3: "L"       is format=0x15   { }

fmt4: "D"       is format=0x11   { }
fmt4: "W"       is format=0x14   { }
fmt4: "L"       is format=0x15   { }

fmt5: "S"       is format1X=0x0   { }
fmt5: "D"       is format1X=0x1   { }
fmt5: "PS"      is format1X=0x6   { }

# Custom Pcode Operations
#
# To add a new pcodeop op that is implemented in Java code:
#
#   In this directory:
#     ./ghidra.git/Ghidra/Processors/MIPS/src/main/java/ghidra/program/emulation
#   Edit this file to register a new Java method that implements the pcodeop:
#     MIPSEmulateInstructionStateModifier.java
#   (Be sure to also import the new class)
#
#   The mips.pspec file must have this key set (this has already been done):
#     <property key="emulateInstructionStateModifierClass" value="ghidra.program.emulation.PS2EEEmulateInstructionStateModifier"/>
#
#   Add the Java class file for the new pcodeop here:
#     ./ghidra.git/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/emulate/callother
#
define pcodeop break;
define pcodeop trap;
define pcodeop wait;
define pcodeop syscall;
define pcodeop cacheOp;
define pcodeop signalDebugBreakpointException;
define pcodeop disableInterrupts;
define pcodeop enableInterrupts;
define pcodeop hazzard;
define pcodeop lockload;
define pcodeop lockwrite;
define pcodeop synch;
define pcodeop tlbop;
define pcodeop bitSwap;
define pcodeop disableProcessor;
define pcodeop enableProcessor;
define pcodeop signalReservedInstruction;
define pcodeop TLB_invalidate;
define pcodeop TLB_invalidate_flush;
define pcodeop TLB_probe_for_matching_entry;
define pcodeop TLB_read_indexed_entryHi;
define pcodeop TLB_read_indexed_entryLo0;
define pcodeop TLB_read_indexed_entryLo1;
define pcodeop TLB_read_indexed_entryPageMask;
define pcodeop TLB_write_indexed_entry;
define pcodeop TLB_write_random_entry;

# prefetch(vaddr, hint); 
define pcodeop prefetch;

# getFpCondition(cc)
define pcodeop getFpCondition;

# getCopCondition(cop_num, cc)
define pcodeop getCopCondition;

# setCopControlWord(cop_num, reg_num, value)
define pcodeop setCopControlWord;

# getCopControlWord(cop_num, reg_num)
define pcodeop getCopControlWord;

# copFunction(cop_num, func)
define pcodeop copFunction;

# getCopReg(cop_num, reg_num)
define pcodeop getCopReg;
define pcodeop getCopRegH;

# setCopReg(cop_num, reg_num, value)
define pcodeop setCopReg;
define pcodeop setCopRegH;

# countLeadingOnes(val)
define pcodeop countLeadingOnes;

# countLeadingZeros(val)
define pcodeop countLeadingZeros;

# extractField(value, msbd, lsb)
define pcodeop extractField;

# getHWRegister(regnum)
define pcodeop getHWRegister;

# setShadow(sgpr, value)
define pcodeop setShadow;

# gpr = getShadow(sgpr)
define pcodeop getShadow;
