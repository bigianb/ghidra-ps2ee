
############################
#
# MIPS Floating Point (COP1 - coprocessor 1) instructions
#       includes arithmetic, compares, branch on FP condition flag, conversions
# Also Coprocessor 0 instructions
#
# Note a MIPS word is 32-bits, and a long is a 64-bit integer
#
#
############################

define pcodeop mipsFloatPS;

# 0100 01ff fff0 0000 ssss sddd dd00 0101
:abs.S fd, fs               is prime=17 & fct=5 & fmt1 & format=0x10 & fs & fd {
	fd[0,32] = abs( fs:4 );
}

# 0100 01ff ffft tttt ssss sddd dd00 0000
:add.S fd, fs, ft           is prime=17 & fct=0 & fmt1 & format=0x10 & ft & fs & fd {
    fd_tmp:4 = fs:4 f+ ft:4;
    fd[0,32] = fs:4 f+ ft:4;
}

# 0100 01ff fff0 0000 ssss sddd dd00 1110
:ceil.w.S fd, fs            is prime=0x11 & ft=0x0 & fct=0x0E & fmt2 & fd & fs & format=0x10 {
    fs_ceil_tmp:4 = ceil(fs:4); # Note that ceil returns a float the same size as its argument
    fd[0,32] = trunc( ceil(fs:4) );
}

# 0100 0100 010t tttt ssss s000 0000 0000
:cfc1 RT, fs_unk                    is prime=17 & copop=2 & RT & fs_unk & bigfunct=0 {    
    tmp:4 = getCopControlWord( 1:1, fs_unk:4 );
    RT = sext(tmp);
}
:cfc1 RT, fs_fcr                is prime=17 & copop=2 & RT & fs_fcr & (fs=0 | fs=25 | fs=26 | fs=28 | fs=31) & bigfunct=0 { 
    RT = sext(fs_fcr);
}
# Since we don't track the state of the FCSR bits, no sense in introducing complex code
#:cfc1 RT, fs_fcr               is prime=17 & copop=2 & RT & fs_fcr & fs=25 & bigfunct=0 {  
#    tmp1:4 = (fcsr & 0x00800000) >> 23;  
#    tmp2:4 = (fcsr & 0xfe000000) >> 24;
#    RT = sext(tmp2 + tmp1);
#}
#:cfc1 RT, fs_fcr                    is prime=17 & copop=2 & RT & fs_fcr & fs=26 & bigfunct=0 {
#    tmp1:4 = fcsr & 0x0003f07c;   
#    RT = sext(tmp1);
#}
#:cfc1 RT, fs_fcr                    is prime=17 & copop=2 & RT & fs_fcr & fs=28 & bigfunct=0 {
#    tmp1:4 = fcsr & 0x00000f83;
#    tmp2:4 = (fcsr & 0x01000000) >> 24;  
#    RT = sext(tmp1 + tmp2);
#}
#:cfc1 RT, fs_fcr                    is prime=17 & copop=2 & RT & fs_fcr & fs=31 & bigfunct=0 {
#    RT = sext(fcsr);
#}

# 0100 0100 110t tttt ssss s000 0000 0000
:ctc1 RTsrc, fs_unk             is prime=17 & copop=6 & RTsrc & fs_unk & bigfunct=0 {    
    setCopControlWord( 1:1, fs_unk:4, RTsrc );
}
:ctc1 RTsrc, fs_fcr             is prime=17 & copop=6 & RTsrc & fs_fcr & (fs=0 | fs=25 | fs=26 | fs=28 | fs=31) & bigfunct=0 {    
    fs_fcr = RTsrc:$(SIZETO4);
}

# 0100 01ff fff0 0000 ssss sddd dd10 0000
:cvt.s.W fd, fs             is prime=0x11 & ft=0x0 & fct=0x20 & fmt4 & fd & fs & format=0x14 {
    fd[0,32] = int2float(fs:4);
}

# 0100 01ff fff0 0000 ssss sddd dd10 0100
:cvt.w.S fd, fs             is prime=0x11 & ft=0x0 & fct=0x24 & fmt2 & fd & fs & format=0x10 {
    # Convert from single float source to 32-bit integer word, using the fcsr RM rounding mode bits
    rm_tmp:1 = fcsr[0,2]; # Get RM rounding mode bits
    fs_tmp:4 = fs:4;
    fs_cvt_tmp:4 = 0;
    if (rm_tmp == 0) goto <do_round>;
      fs_cvt_tmp = floor(fs_tmp); # RM is 1, no rounding, and floor returns a float
      goto <done>;
    <do_round>
      fs_cvt_tmp = round(fs_tmp); # round returns a float
    <done>
    fd[0,32] = trunc(fs_cvt_tmp);	# trunc returns an integer
}

# 0100 01ff ffft tttt ssss sddd dd00 0011
:div.S fd, fs, ft           is prime=17 & fct=3 & fmt2 & ft & fs & fd & format=0x10 {
    fd[0,32] = fs:4 f/ ft:4;
}

# 0100 01ff fff0 0000 ssss sddd dd00 1111
:floor.w.S fd, fs           is prime=0x11 & ft=0x0 & fct=0x0F & fmt2 & fd & fs & format=0x10 {
    # Floor of single float copied to a 32-bit integer word
    fd_tmp:4 = floor(fs:4); # returns a float
    fd = trunc(fd_tmp);  # converts float to int
}

# 1100 01bb bbbt tttt iiii iiii iiii iiii
:lwc1 ft, OFF_BASE              is prime=49 & OFF_BASE & ft {        
    ft[0,32] = *[ram]:4 OFF_BASE;
}

# 0100 0100 000t tttt ssss s000 0000 0000
:mfc1 RT, fs                    is prime=17 & copop=0 & RT & fs & bigfunct=0 {
    # Move just a word, 32-bits
    RT = sext( fs:$(SIZETO4) );
}

# 0100 01ff fff0 0000 ssss sddd dd00 0110
:mov.S fd, fs               is prime=17 & fct=6 & fmt1 & fs & fd & format=0x10 {
    fd[0,32] = fs:4;
}

# 0100 0100 100t tttt dddd d000 0000 0000
:mtc1 RTsrc, fs                 is prime=17 & copop=4 & RTsrc & fs & bigfunct=0 {
    # Move 32-bits of RTsrc to Low Half of FPR fs
	fs[0,32] = RTsrc:$(SIZETO4);
}

# 0100 01ff ffft tttt ssss sddd dd00 0010
:mul.S fd, fs, ft           is prime=17 & fct=2 & fmt1 & ft & fs & fd & format=0x10 {
    fd[0,32] = fs:4 f* ft:4; # need to only get the single float 32-bit (fs might be 64-bits)
}

# 0100 01ff fff0 0000 ssss sddd dd00 0111
:neg.S fd, fs               is prime=17 & fct=7 & fmt1 & fs & fd & format=0x10 {
    fd[0,32] = f- fs:4;
}

# 0100 01ff fff0 0000 ssss sddd dd01 0101
:recip.S fd, fs             is prime=17 & ft=0 & fct=21 & fmt2 & fd & fs  & format=0x10 {
    fd[0,32] = 1:4 f/ fs:4;
}

# 0100 01ff fff0 0000 ssss sddd dd00 1100
:round.w.S fd, fs           is prime=17 & ft=0 & fct=12 & fmt2 & fd & fs & format=0x10 {
    fd_tmp:4 = round(fs:4);
    fd = trunc(fd_tmp);
}

# 0100 01ff fff0 0000 ssss sddd dd01 0110
:rsqrt.S fd, fs             is prime=17 & ft=0 & fct=22 & fmt2 & fd & fs & format=0x10 {
    fd[0,32] = 1:4 f/ sqrt(fs:4);
}

# 0100 01ff fff0 0000 ssss sddd dd00 0100
:sqrt.S fd, fs              is prime=17 & ft=0 & fct=4 & fmt2 & fd & fs & format=0x10 {
    fd[0,32] = sqrt(fs:4);
}

# 0100 01ff ffft tttt ssss sddd dd00 0001
:sub.S fmt1 fd, fs, ft           is prime=17 & fct=1 & fmt1 & ft & fs & fd & format=0x10 {
    fd[0,32] = fs:4 f- ft:4;
}

# 1110 01bb bbbt tttt iiii iiii iiii iiii
:swc1 ft, OFF_BASE              is prime=57 & OFF_BASE & ft { 
    *[ram]:4 OFF_BASE = ft:$(SIZETO4); 
}

# 0100 01ff fff0 0000 ssss sddd dd00 1101
:trunc.w.S fd, fs           is prime=17 & cop1code=0 & fmt2 & fs & fd & fct=13 & format=0x10 {
    fd[0,32] = trunc(fs:4);
}

############################
#
# COP1X (Extended FP)
#
############################

# 0100 11bb bbbi iiii 0000 0ddd dd00 0000
:lwxc1 fd, INDEX_BASE           is prime=0x13 & zero4=0 & fct=0x0  & INDEX_BASE & fd {
    fd[0,32] = *[ram]:4 INDEX_BASE;
}

# 0100 11rr rrrt tttt ssss sddd dd10 0fff
:madd.S fd, fr, fs, ft      is prime=0x13 & op4=0x04 & fmt5 & fd & fr & fs & ft & format1X=0x0 {
    fd[0,32] = (fs:4 f* ft:4) f+ fr:4; # must do floating arithmetic in 32 bit
}

# 0100 11rr rrrt tttt ssss sddd dd10 1fff
:msub.S fd, fr, fs, ft      is prime=0x13 & op4=0x05 & fmt5 & fd & fr & fs & ft & format1X=0x0 {
    fd[0,32] = (fs:4 f* ft:4) f- fr:4; # must do floating arithmetic in 32 bit
}

# 0100 11rr rrrt tttt ssss sddd dd11 0fff
:nmadd.S fd, fr, fs, ft     is prime=0x13 & op4=0x06 & fmt5 & fd & fr & fs & ft & format1X=0x0 {
    fd[0,32] = f- (fs:4 f* ft:4) f+ fr:4; # must do floating arithmetic in 32 bit
}

# 0100 11rr rrrt tttt ssss sddd dd11 1fff
:nmsub.S fd, fr, fs, ft     is prime=0x13 & op4=0x07 & fmt5 & fd & fr & fs & ft & format1X=0x0 {
    fd[0,32] = f- (fs:4 f* ft:4) f- fr:4; # must do floating arithmetic in 32 bit
}

# 0100 11bb bbbi iiii hhhh h000 0000 1111
:prefx hint, INDEX_BASE         is prime=0x13 & zero5=0x0 & fct=0x0F & hint & INDEX_BASE {
    prefetch(INDEX_BASE, hint:1); 
}

# 0100 11bb bbbi iiii ssss s000 0000 1000
:swxc1 fs, INDEX_BASE           is prime=19 & INDEX_BASE & fs & fd=0 & fct=8  {
    *[ram]:4 INDEX_BASE = fs:$(SIZETO4);    
}
####
#
# Pre-6 semantics
#
####
# 0100 0101 000c cc00 iiii iiii iiii iiii
:bc1f Rel16                     is prime=17 & copop=8 & cc=0 & nd=0 & tf=0 & Rel16 {
    tmp:1 = fcsr[23,1]; # The floating point condition bit
    delayslot(1);
    if (tmp != 0) goto inst_next;
    goto Rel16;
}
:bc1f cc,Rel16                  is prime=17 & copop=8 & cc & nd=0 & tf=0 & Rel16 {
    # tmp:1 = getFpCondition(cc:1);  # Note that other cc conditions are not implemented
    tmp:1 = fcsr[23,1]; # The floating point condition bit
    delayslot(1);
    if (tmp != 0) goto inst_next;
    goto Rel16;
}
# 0100 0101 000c cc10 iiii iiii iiii iiii
:bc1fl Rel16                    is prime=17 & copop=8 & cc=0 & nd=1 & tf=0 & Rel16 {
    tmp:1 = fcsr[23,1];
    if (tmp != 0) goto inst_next;
    delayslot(1);
    goto Rel16;
}
:bc1fl cc,Rel16                 is prime=17 & copop=8 & cc & nd=1 & tf=0 & Rel16 {
    # tmp:1 = getFpCondition(cc:1);
    tmp:1 = fcsr[23,1]; # The floating point condition bit
    if (tmp != 0) goto inst_next;
    delayslot(1);
    goto Rel16;
}

# 0100 0101 000c cc01 iiii iiii iiii iiii
:bc1t Rel16                     is prime=17 & copop=8 & cc=0 & nd=0 & tf=1 & Rel16 {
    tmp:1 = fcsr[23,1];
    delayslot(1);
    if (tmp == 0) goto inst_next;
    goto Rel16;
}
:bc1t cc,Rel16                  is prime=17 & copop=8 & cc & nd=0 & tf=1 & Rel16 {
    # tmp:1 = getFpCondition(cc:1);
    tmp:1 = fcsr[23,1]; # The floating point condition bit
    delayslot(1);
    if (tmp == 0) goto inst_next;
    goto Rel16;
}
# 0100 0101 000c cc11 iiii iiii iiii iiii
:bc1tl Rel16                    is prime=17 & copop=8 & cc=0 & nd=1 & tf=1 & Rel16 {
    tmp:1 = fcsr[23,1];
    if (tmp == 0) goto inst_next;
    delayslot(1);
    goto Rel16;
}
:bc1tl cc,Rel16                 is prime=17 & copop=8 & cc & nd=1 & tf=1 & Rel16 {
    # tmp:1 = getFpCondition(cc:1);
    tmp:1 = fcsr[23,1]; # The floating point condition bit
    if (tmp == 0) goto inst_next;
    delayslot(1);
    goto Rel16;
}

# The pre-release 6 floating point compare instructions, c.condn.S or .D, set the fcsr bit 23

macro trapIfNaN(x1, x2) { }
macro trapIfSNaN(x1, x2) { }

:c.f.S fs, ft               is prime=17 & fct=48 & fmt1 & format=0x10 & fs & ft {
    trapIfSNaN(fs:4, ft:4); # Trap if either operand is a Signaling NaN
    fcsr[23,1] = 0; # Always false
}

:c.un.S fs, ft              is prime=17 & fct=49 & fmt1 & format=0x10 & fs & ft {
    trapIfSNaN(fs:4, ft:4);
    fcsr[23,1] = nan(fs:4) || nan(ft:4); # True if operands are NaN
}

:c.eq.S fs, ft              is prime=17 & fct=50 & fmt1 & format=0x10 & fs & ft {
    trapIfSNaN(fs:4, ft:4);
    fcsr[23,1] = (fs:4 f== ft:4);
}

:c.ueq.S fs, ft              is prime=17 & fct=51 & fmt1 & format=0x10 & fs & ft {
    trapIfSNaN(fs:4, ft:4);
    fcsr[23,1] = (fs:4 f== ft:4);
}

:c.olt.S fs, ft              is prime=17 & fct=52 & fmt1 & format=0x10 & fs & ft {
    trapIfSNaN(fs:4, ft:4);
    fcsr[23,1] = (fs:4 f< ft:4);
}

:c.ult.S fs, ft              is prime=17 & fct=53 & fmt1 & format=0x10 & fs & ft {
    trapIfSNaN(fs:4, ft:4);
    fcsr[23,1] = (fs:4 f< ft:4) || nan(fs:4) || nan(ft:4); # Less than or NaN
}

:c.ole.S fs, ft              is prime=17 & fct=54 & fmt1 & format=0x10 & fs & ft {
    trapIfSNaN(fs:4, ft:4);
    fcsr[23,1] = (fs:4 f<= ft:4);
}

:c.ule.S fs, ft              is prime=17 & fct=55 & fmt1 & format=0x10 & fs & ft {
    trapIfSNaN(fs:4, ft:4);
    fcsr[23,1] = (fs:4 f<= ft:4) || nan(fs:4) || nan(ft:4); # Less than or equal or NaN
}

# The pre-release 6 floating point compare instructions that trap if either operand is NaN (either QNaN or SNaN)

:c.sf.S fs, ft              is prime=17 & fct=56 & fmt1 & fs & ft & format=0x10 {
    trapIfNaN(fs:4, ft:4);
    fcsr[23,1] = 0; # Always false
}

:c.ngle.S fs, ft              is prime=17 & fct=57 & fmt1 & format=0x10 & fs & ft {
    trapIfNaN(fs:4, ft:4);
    fcsr[23,1] = nan(fs:4) || nan(ft:4);
}

:c.seq.S fs, ft              is prime=17 & fct=58 & fmt1 & format=0x10 & fs & ft {
    trapIfNaN(fs:4, ft:4);
    fcsr[23,1] = (fs:4 f== ft:4);
}

:c.ngl.S fs, ft              is prime=17 & fct=59 & fmt1 & format=0x10 & fs & ft {
    trapIfNaN(fs:4, ft:4);
    fcsr[23,1] = (fs:4 f== ft:4) || nan(fs:4) || nan(ft:4);
}

:c.lt.S fs, ft              is prime=17 & fct=60 & fmt1 & format=0x10 & fs & ft {
    trapIfNaN(fs:4, ft:4);
    fcsr[23,1] = (fs:4 f< ft:4);
}

:c.nge.S fs, ft              is prime=17 & fct=61 & fmt1 & format=0x10 & fs & ft {
    trapIfNaN(fs:4, ft:4);
    fcsr[23,1] = (fs:4 f< ft:4) || nan(fs:4) || nan(ft:4);
}

:c.le.S fs, ft              is prime=17 & fct=62 & fmt1 & format=0x10 & fs & ft {
    trapIfNaN(fs:4, ft:4);
    fcsr[23,1] = (fs:4 f<= ft:4);
}

:c.ngt.S fs, ft              is prime=17 & fct=63 & fmt1 & format=0x10 & fs & ft {
    trapIfNaN(fs:4, ft:4);
    fcsr[23,1] = (fs:4 f<= ft:4) || nan(fs:4) || nan(ft:4); # Less than or equal or NaN
}

# 0100 01ff fffc cc00 ssss sddd dd01 0001
:movf.S fd, fs, cc          is prime=17 & nd=0 & tf=0 & fct=17 & fmt1 & fd & fs & cc & format=0x10 {
    # Move if FP condition flag is false
    tmp:1 = fcsr[23,1];
    if (tmp != 0) goto <done>;
    fd[0,32] = fs:4;
    <done>
}

# 0100 01ff ffft tttt ssss sddd dd01 0011
:movn.S fd, fs, RTsrc       is prime=17 & fct=19 & fmt1 & fd & fs & RTsrc & format=0x10 {
    if (RTsrc == 0) goto <done>;
    fd[0,32] = fs:4;
    <done>
}

# 0100 01ff fffc cc01 ssss sddd dd01 0001
:movt.S fd, fs, cc          is prime=17 & nd=0 & tf=1 & fct=17 & fmt1 & fd & fs & cc & format=0x10 {
    # Move if FP condition flag is true
    tmp:1 = fcsr[23,1];
    if (tmp != 1) goto <done>;
    fd[0,32] = fs:4;
    <done>
}

# 0100 01ff ffft tttt ssss sddd dd01 0010
:movz.S fd, fs, RTsrc       is prime=17 & fct=18 & fmt1 & fd & fs & RTsrc & format=0x10 {
    if (RTsrc != 0) goto <done>;
    fd[0,32] = fs:4;
    <done>
}

